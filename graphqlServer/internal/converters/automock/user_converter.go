// Code generated by mockery. DO NOT EDIT.

package automock

import (
	mock "github.com/stretchr/testify/mock"
	graphql "github.com/Victor-Uzunov/devops-project/graphqlServer/generated/graphql"

	models "github.com/Victor-Uzunov/devops-project/todoservice/pkg/models"
)

// UserConverter is an autogenerated mock type for the UserConverter type
type UserConverter struct {
	mock.Mock
}

type UserConverter_Expecter struct {
	mock *mock.Mock
}

func (_m *UserConverter) EXPECT() *UserConverter_Expecter {
	return &UserConverter_Expecter{mock: &_m.Mock}
}

// ConvertCreateUserInput provides a mock function with given fields: input
func (_m *UserConverter) ConvertCreateUserInput(input graphql.CreateUserInput) (models.User, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for ConvertCreateUserInput")
	}

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(graphql.CreateUserInput) (models.User, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(graphql.CreateUserInput) models.User); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(graphql.CreateUserInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserConverter_ConvertCreateUserInput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertCreateUserInput'
type UserConverter_ConvertCreateUserInput_Call struct {
	*mock.Call
}

// ConvertCreateUserInput is a helper method to define mock.On call
//   - input graphql.CreateUserInput
func (_e *UserConverter_Expecter) ConvertCreateUserInput(input interface{}) *UserConverter_ConvertCreateUserInput_Call {
	return &UserConverter_ConvertCreateUserInput_Call{Call: _e.mock.On("ConvertCreateUserInput", input)}
}

func (_c *UserConverter_ConvertCreateUserInput_Call) Run(run func(input graphql.CreateUserInput)) *UserConverter_ConvertCreateUserInput_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(graphql.CreateUserInput))
	})
	return _c
}

func (_c *UserConverter_ConvertCreateUserInput_Call) Return(_a0 models.User, _a1 error) *UserConverter_ConvertCreateUserInput_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserConverter_ConvertCreateUserInput_Call) RunAndReturn(run func(graphql.CreateUserInput) (models.User, error)) *UserConverter_ConvertCreateUserInput_Call {
	_c.Call.Return(run)
	return _c
}

// ConvertUpdateUserInput provides a mock function with given fields: input
func (_m *UserConverter) ConvertUpdateUserInput(input graphql.UpdateUserInput) (models.User, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for ConvertUpdateUserInput")
	}

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(graphql.UpdateUserInput) (models.User, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(graphql.UpdateUserInput) models.User); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(graphql.UpdateUserInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserConverter_ConvertUpdateUserInput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertUpdateUserInput'
type UserConverter_ConvertUpdateUserInput_Call struct {
	*mock.Call
}

// ConvertUpdateUserInput is a helper method to define mock.On call
//   - input graphql.UpdateUserInput
func (_e *UserConverter_Expecter) ConvertUpdateUserInput(input interface{}) *UserConverter_ConvertUpdateUserInput_Call {
	return &UserConverter_ConvertUpdateUserInput_Call{Call: _e.mock.On("ConvertUpdateUserInput", input)}
}

func (_c *UserConverter_ConvertUpdateUserInput_Call) Run(run func(input graphql.UpdateUserInput)) *UserConverter_ConvertUpdateUserInput_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(graphql.UpdateUserInput))
	})
	return _c
}

func (_c *UserConverter_ConvertUpdateUserInput_Call) Return(_a0 models.User, _a1 error) *UserConverter_ConvertUpdateUserInput_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserConverter_ConvertUpdateUserInput_Call) RunAndReturn(run func(graphql.UpdateUserInput) (models.User, error)) *UserConverter_ConvertUpdateUserInput_Call {
	_c.Call.Return(run)
	return _c
}

// ConvertUserToGraphQL provides a mock function with given fields: user
func (_m *UserConverter) ConvertUserToGraphQL(user models.User) (*graphql.User, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for ConvertUserToGraphQL")
	}

	var r0 *graphql.User
	var r1 error
	if rf, ok := ret.Get(0).(func(models.User) (*graphql.User, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(models.User) *graphql.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*graphql.User)
		}
	}

	if rf, ok := ret.Get(1).(func(models.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserConverter_ConvertUserToGraphQL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertUserToGraphQL'
type UserConverter_ConvertUserToGraphQL_Call struct {
	*mock.Call
}

// ConvertUserToGraphQL is a helper method to define mock.On call
//   - user models.User
func (_e *UserConverter_Expecter) ConvertUserToGraphQL(user interface{}) *UserConverter_ConvertUserToGraphQL_Call {
	return &UserConverter_ConvertUserToGraphQL_Call{Call: _e.mock.On("ConvertUserToGraphQL", user)}
}

func (_c *UserConverter_ConvertUserToGraphQL_Call) Run(run func(user models.User)) *UserConverter_ConvertUserToGraphQL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.User))
	})
	return _c
}

func (_c *UserConverter_ConvertUserToGraphQL_Call) Return(_a0 *graphql.User, _a1 error) *UserConverter_ConvertUserToGraphQL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserConverter_ConvertUserToGraphQL_Call) RunAndReturn(run func(models.User) (*graphql.User, error)) *UserConverter_ConvertUserToGraphQL_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserConverter creates a new instance of UserConverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserConverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserConverter {
	mock := &UserConverter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
