// Code generated by mockery. DO NOT EDIT.

package automock

import (
	mock "github.com/stretchr/testify/mock"
	graphql "github.com/Victor-Uzunov/devops-project/graphqlServer/generated/graphql"

	models "github.com/Victor-Uzunov/devops-project/todoservice/pkg/models"
)

// TodoConverter is an autogenerated mock type for the TodoConverter type
type TodoConverter struct {
	mock.Mock
}

type TodoConverter_Expecter struct {
	mock *mock.Mock
}

func (_m *TodoConverter) EXPECT() *TodoConverter_Expecter {
	return &TodoConverter_Expecter{mock: &_m.Mock}
}

// ConvertCreateTodoInput provides a mock function with given fields: input
func (_m *TodoConverter) ConvertCreateTodoInput(input graphql.CreateTodoInput) (models.Todo, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for ConvertCreateTodoInput")
	}

	var r0 models.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(graphql.CreateTodoInput) (models.Todo, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(graphql.CreateTodoInput) models.Todo); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(models.Todo)
	}

	if rf, ok := ret.Get(1).(func(graphql.CreateTodoInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TodoConverter_ConvertCreateTodoInput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertCreateTodoInput'
type TodoConverter_ConvertCreateTodoInput_Call struct {
	*mock.Call
}

// ConvertCreateTodoInput is a helper method to define mock.On call
//   - input graphql.CreateTodoInput
func (_e *TodoConverter_Expecter) ConvertCreateTodoInput(input interface{}) *TodoConverter_ConvertCreateTodoInput_Call {
	return &TodoConverter_ConvertCreateTodoInput_Call{Call: _e.mock.On("ConvertCreateTodoInput", input)}
}

func (_c *TodoConverter_ConvertCreateTodoInput_Call) Run(run func(input graphql.CreateTodoInput)) *TodoConverter_ConvertCreateTodoInput_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(graphql.CreateTodoInput))
	})
	return _c
}

func (_c *TodoConverter_ConvertCreateTodoInput_Call) Return(_a0 models.Todo, _a1 error) *TodoConverter_ConvertCreateTodoInput_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TodoConverter_ConvertCreateTodoInput_Call) RunAndReturn(run func(graphql.CreateTodoInput) (models.Todo, error)) *TodoConverter_ConvertCreateTodoInput_Call {
	_c.Call.Return(run)
	return _c
}

// ConvertMultipleTodoToGraphQL provides a mock function with given fields: todos
func (_m *TodoConverter) ConvertMultipleTodoToGraphQL(todos []*models.Todo) ([]*graphql.Todo, error) {
	ret := _m.Called(todos)

	if len(ret) == 0 {
		panic("no return value specified for ConvertMultipleTodoToGraphQL")
	}

	var r0 []*graphql.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func([]*models.Todo) ([]*graphql.Todo, error)); ok {
		return rf(todos)
	}
	if rf, ok := ret.Get(0).(func([]*models.Todo) []*graphql.Todo); ok {
		r0 = rf(todos)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*graphql.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func([]*models.Todo) error); ok {
		r1 = rf(todos)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TodoConverter_ConvertMultipleTodoToGraphQL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertMultipleTodoToGraphQL'
type TodoConverter_ConvertMultipleTodoToGraphQL_Call struct {
	*mock.Call
}

// ConvertMultipleTodoToGraphQL is a helper method to define mock.On call
//   - todos []*models.Todo
func (_e *TodoConverter_Expecter) ConvertMultipleTodoToGraphQL(todos interface{}) *TodoConverter_ConvertMultipleTodoToGraphQL_Call {
	return &TodoConverter_ConvertMultipleTodoToGraphQL_Call{Call: _e.mock.On("ConvertMultipleTodoToGraphQL", todos)}
}

func (_c *TodoConverter_ConvertMultipleTodoToGraphQL_Call) Run(run func(todos []*models.Todo)) *TodoConverter_ConvertMultipleTodoToGraphQL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*models.Todo))
	})
	return _c
}

func (_c *TodoConverter_ConvertMultipleTodoToGraphQL_Call) Return(_a0 []*graphql.Todo, _a1 error) *TodoConverter_ConvertMultipleTodoToGraphQL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TodoConverter_ConvertMultipleTodoToGraphQL_Call) RunAndReturn(run func([]*models.Todo) ([]*graphql.Todo, error)) *TodoConverter_ConvertMultipleTodoToGraphQL_Call {
	_c.Call.Return(run)
	return _c
}

// ConvertTodoToGraphQL provides a mock function with given fields: todo
func (_m *TodoConverter) ConvertTodoToGraphQL(todo models.Todo) (*graphql.Todo, error) {
	ret := _m.Called(todo)

	if len(ret) == 0 {
		panic("no return value specified for ConvertTodoToGraphQL")
	}

	var r0 *graphql.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Todo) (*graphql.Todo, error)); ok {
		return rf(todo)
	}
	if rf, ok := ret.Get(0).(func(models.Todo) *graphql.Todo); ok {
		r0 = rf(todo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*graphql.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(models.Todo) error); ok {
		r1 = rf(todo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TodoConverter_ConvertTodoToGraphQL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertTodoToGraphQL'
type TodoConverter_ConvertTodoToGraphQL_Call struct {
	*mock.Call
}

// ConvertTodoToGraphQL is a helper method to define mock.On call
//   - todo models.Todo
func (_e *TodoConverter_Expecter) ConvertTodoToGraphQL(todo interface{}) *TodoConverter_ConvertTodoToGraphQL_Call {
	return &TodoConverter_ConvertTodoToGraphQL_Call{Call: _e.mock.On("ConvertTodoToGraphQL", todo)}
}

func (_c *TodoConverter_ConvertTodoToGraphQL_Call) Run(run func(todo models.Todo)) *TodoConverter_ConvertTodoToGraphQL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Todo))
	})
	return _c
}

func (_c *TodoConverter_ConvertTodoToGraphQL_Call) Return(_a0 *graphql.Todo, _a1 error) *TodoConverter_ConvertTodoToGraphQL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TodoConverter_ConvertTodoToGraphQL_Call) RunAndReturn(run func(models.Todo) (*graphql.Todo, error)) *TodoConverter_ConvertTodoToGraphQL_Call {
	_c.Call.Return(run)
	return _c
}

// ConvertUpdateTodoInput provides a mock function with given fields: input
func (_m *TodoConverter) ConvertUpdateTodoInput(input graphql.UpdateTodoInput) (models.Todo, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for ConvertUpdateTodoInput")
	}

	var r0 models.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(graphql.UpdateTodoInput) (models.Todo, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(graphql.UpdateTodoInput) models.Todo); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(models.Todo)
	}

	if rf, ok := ret.Get(1).(func(graphql.UpdateTodoInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TodoConverter_ConvertUpdateTodoInput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertUpdateTodoInput'
type TodoConverter_ConvertUpdateTodoInput_Call struct {
	*mock.Call
}

// ConvertUpdateTodoInput is a helper method to define mock.On call
//   - input graphql.UpdateTodoInput
func (_e *TodoConverter_Expecter) ConvertUpdateTodoInput(input interface{}) *TodoConverter_ConvertUpdateTodoInput_Call {
	return &TodoConverter_ConvertUpdateTodoInput_Call{Call: _e.mock.On("ConvertUpdateTodoInput", input)}
}

func (_c *TodoConverter_ConvertUpdateTodoInput_Call) Run(run func(input graphql.UpdateTodoInput)) *TodoConverter_ConvertUpdateTodoInput_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(graphql.UpdateTodoInput))
	})
	return _c
}

func (_c *TodoConverter_ConvertUpdateTodoInput_Call) Return(_a0 models.Todo, _a1 error) *TodoConverter_ConvertUpdateTodoInput_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TodoConverter_ConvertUpdateTodoInput_Call) RunAndReturn(run func(graphql.UpdateTodoInput) (models.Todo, error)) *TodoConverter_ConvertUpdateTodoInput_Call {
	_c.Call.Return(run)
	return _c
}

// NewTodoConverter creates a new instance of TodoConverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTodoConverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *TodoConverter {
	mock := &TodoConverter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
