// Code generated by mockery. DO NOT EDIT.

package automock

import (
	http "net/http"

	constants "github.com/Victor-Uzunov/devops-project/todoservice/pkg/constants"

	mock "github.com/stretchr/testify/mock"
)

// Middlewares is an autogenerated mock type for the Middlewares type
type Middlewares struct {
	mock.Mock
}

type Middlewares_Expecter struct {
	mock *mock.Mock
}

func (_m *Middlewares) EXPECT() *Middlewares_Expecter {
	return &Middlewares_Expecter{mock: &_m.Mock}
}

// JWTMiddleware provides a mock function with given fields: next
func (_m *Middlewares) JWTMiddleware(next http.Handler) http.Handler {
	ret := _m.Called(next)

	if len(ret) == 0 {
		panic("no return value specified for JWTMiddleware")
	}

	var r0 http.Handler
	if rf, ok := ret.Get(0).(func(http.Handler) http.Handler); ok {
		r0 = rf(next)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Handler)
		}
	}

	return r0
}

// Middlewares_JWTMiddleware_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JWTMiddleware'
type Middlewares_JWTMiddleware_Call struct {
	*mock.Call
}

// JWTMiddleware is a helper method to define mock.On call
//   - next http.Handler
func (_e *Middlewares_Expecter) JWTMiddleware(next interface{}) *Middlewares_JWTMiddleware_Call {
	return &Middlewares_JWTMiddleware_Call{Call: _e.mock.On("JWTMiddleware", next)}
}

func (_c *Middlewares_JWTMiddleware_Call) Run(run func(next http.Handler)) *Middlewares_JWTMiddleware_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.Handler))
	})
	return _c
}

func (_c *Middlewares_JWTMiddleware_Call) Return(_a0 http.Handler) *Middlewares_JWTMiddleware_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Middlewares_JWTMiddleware_Call) RunAndReturn(run func(http.Handler) http.Handler) *Middlewares_JWTMiddleware_Call {
	_c.Call.Return(run)
	return _c
}

// Protected provides a mock function with given fields: next, neededRole, accessibility
func (_m *Middlewares) Protected(next http.Handler, neededRole constants.Role, accessibility constants.Accessibility) http.Handler {
	ret := _m.Called(next, neededRole, accessibility)

	if len(ret) == 0 {
		panic("no return value specified for Protected")
	}

	var r0 http.Handler
	if rf, ok := ret.Get(0).(func(http.Handler, constants.Role, constants.Accessibility) http.Handler); ok {
		r0 = rf(next, neededRole, accessibility)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Handler)
		}
	}

	return r0
}

// Middlewares_Protected_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Protected'
type Middlewares_Protected_Call struct {
	*mock.Call
}

// Protected is a helper method to define mock.On call
//   - next http.Handler
//   - neededRole constants.Role
//   - accessibility constants.Accessibility
func (_e *Middlewares_Expecter) Protected(next interface{}, neededRole interface{}, accessibility interface{}) *Middlewares_Protected_Call {
	return &Middlewares_Protected_Call{Call: _e.mock.On("Protected", next, neededRole, accessibility)}
}

func (_c *Middlewares_Protected_Call) Run(run func(next http.Handler, neededRole constants.Role, accessibility constants.Accessibility)) *Middlewares_Protected_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.Handler), args[1].(constants.Role), args[2].(constants.Accessibility))
	})
	return _c
}

func (_c *Middlewares_Protected_Call) Return(_a0 http.Handler) *Middlewares_Protected_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Middlewares_Protected_Call) RunAndReturn(run func(http.Handler, constants.Role, constants.Accessibility) http.Handler) *Middlewares_Protected_Call {
	_c.Call.Return(run)
	return _c
}

// NewMiddlewares creates a new instance of Middlewares. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMiddlewares(t interface {
	mock.TestingT
	Cleanup(func())
}) *Middlewares {
	mock := &Middlewares{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
