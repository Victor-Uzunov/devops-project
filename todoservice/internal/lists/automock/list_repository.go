// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/Victor-Uzunov/devops-project/todoservice/pkg/models"
)

// ListRepository is an autogenerated mock type for the ListRepository type
type ListRepository struct {
	mock.Mock
}

type ListRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ListRepository) EXPECT() *ListRepository_Expecter {
	return &ListRepository_Expecter{mock: &_m.Mock}
}

// AcceptList provides a mock function with given fields: ctx, listID, userID
func (_m *ListRepository) AcceptList(ctx context.Context, listID string, userID string) error {
	ret := _m.Called(ctx, listID, userID)

	if len(ret) == 0 {
		panic("no return value specified for AcceptList")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, listID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListRepository_AcceptList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AcceptList'
type ListRepository_AcceptList_Call struct {
	*mock.Call
}

// AcceptList is a helper method to define mock.On call
//   - ctx context.Context
//   - listID string
//   - userID string
func (_e *ListRepository_Expecter) AcceptList(ctx interface{}, listID interface{}, userID interface{}) *ListRepository_AcceptList_Call {
	return &ListRepository_AcceptList_Call{Call: _e.mock.On("AcceptList", ctx, listID, userID)}
}

func (_c *ListRepository_AcceptList_Call) Run(run func(ctx context.Context, listID string, userID string)) *ListRepository_AcceptList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ListRepository_AcceptList_Call) Return(_a0 error) *ListRepository_AcceptList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ListRepository_AcceptList_Call) RunAndReturn(run func(context.Context, string, string) error) *ListRepository_AcceptList_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, list
func (_m *ListRepository) Create(ctx context.Context, list models.List) (string, error) {
	ret := _m.Called(ctx, list)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.List) (string, error)); ok {
		return rf(ctx, list)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.List) string); ok {
		r0 = rf(ctx, list)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.List) error); ok {
		r1 = rf(ctx, list)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ListRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - list models.List
func (_e *ListRepository_Expecter) Create(ctx interface{}, list interface{}) *ListRepository_Create_Call {
	return &ListRepository_Create_Call{Call: _e.mock.On("Create", ctx, list)}
}

func (_c *ListRepository_Create_Call) Run(run func(ctx context.Context, list models.List)) *ListRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.List))
	})
	return _c
}

func (_c *ListRepository_Create_Call) Return(_a0 string, _a1 error) *ListRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ListRepository_Create_Call) RunAndReturn(run func(context.Context, models.List) (string, error)) *ListRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAccess provides a mock function with given fields: ctx, access
func (_m *ListRepository) CreateAccess(ctx context.Context, access models.Access) (models.Access, error) {
	ret := _m.Called(ctx, access)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccess")
	}

	var r0 models.Access
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Access) (models.Access, error)); ok {
		return rf(ctx, access)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Access) models.Access); ok {
		r0 = rf(ctx, access)
	} else {
		r0 = ret.Get(0).(models.Access)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Access) error); ok {
		r1 = rf(ctx, access)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRepository_CreateAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccess'
type ListRepository_CreateAccess_Call struct {
	*mock.Call
}

// CreateAccess is a helper method to define mock.On call
//   - ctx context.Context
//   - access models.Access
func (_e *ListRepository_Expecter) CreateAccess(ctx interface{}, access interface{}) *ListRepository_CreateAccess_Call {
	return &ListRepository_CreateAccess_Call{Call: _e.mock.On("CreateAccess", ctx, access)}
}

func (_c *ListRepository_CreateAccess_Call) Run(run func(ctx context.Context, access models.Access)) *ListRepository_CreateAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Access))
	})
	return _c
}

func (_c *ListRepository_CreateAccess_Call) Return(_a0 models.Access, _a1 error) *ListRepository_CreateAccess_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ListRepository_CreateAccess_Call) RunAndReturn(run func(context.Context, models.Access) (models.Access, error)) *ListRepository_CreateAccess_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *ListRepository) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type ListRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ListRepository_Expecter) Delete(ctx interface{}, id interface{}) *ListRepository_Delete_Call {
	return &ListRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *ListRepository_Delete_Call) Run(run func(ctx context.Context, id string)) *ListRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ListRepository_Delete_Call) Return(_a0 error) *ListRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ListRepository_Delete_Call) RunAndReturn(run func(context.Context, string) error) *ListRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAccess provides a mock function with given fields: ctx, listID, userID
func (_m *ListRepository) DeleteAccess(ctx context.Context, listID string, userID string) error {
	ret := _m.Called(ctx, listID, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccess")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, listID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListRepository_DeleteAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAccess'
type ListRepository_DeleteAccess_Call struct {
	*mock.Call
}

// DeleteAccess is a helper method to define mock.On call
//   - ctx context.Context
//   - listID string
//   - userID string
func (_e *ListRepository_Expecter) DeleteAccess(ctx interface{}, listID interface{}, userID interface{}) *ListRepository_DeleteAccess_Call {
	return &ListRepository_DeleteAccess_Call{Call: _e.mock.On("DeleteAccess", ctx, listID, userID)}
}

func (_c *ListRepository_DeleteAccess_Call) Run(run func(ctx context.Context, listID string, userID string)) *ListRepository_DeleteAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ListRepository_DeleteAccess_Call) Return(_a0 error) *ListRepository_DeleteAccess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ListRepository_DeleteAccess_Call) RunAndReturn(run func(context.Context, string, string) error) *ListRepository_DeleteAccess_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *ListRepository) Get(ctx context.Context, id string) (models.List, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 models.List
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.List, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.List); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.List)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type ListRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ListRepository_Expecter) Get(ctx interface{}, id interface{}) *ListRepository_Get_Call {
	return &ListRepository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *ListRepository_Get_Call) Run(run func(ctx context.Context, id string)) *ListRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ListRepository_Get_Call) Return(_a0 models.List, _a1 error) *ListRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ListRepository_Get_Call) RunAndReturn(run func(context.Context, string) (models.List, error)) *ListRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAcceptedLists provides a mock function with given fields: ctx, listID
func (_m *ListRepository) GetAcceptedLists(ctx context.Context, listID string) ([]models.Access, error) {
	ret := _m.Called(ctx, listID)

	if len(ret) == 0 {
		panic("no return value specified for GetAcceptedLists")
	}

	var r0 []models.Access
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]models.Access, error)); ok {
		return rf(ctx, listID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.Access); ok {
		r0 = rf(ctx, listID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Access)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, listID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRepository_GetAcceptedLists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAcceptedLists'
type ListRepository_GetAcceptedLists_Call struct {
	*mock.Call
}

// GetAcceptedLists is a helper method to define mock.On call
//   - ctx context.Context
//   - listID string
func (_e *ListRepository_Expecter) GetAcceptedLists(ctx interface{}, listID interface{}) *ListRepository_GetAcceptedLists_Call {
	return &ListRepository_GetAcceptedLists_Call{Call: _e.mock.On("GetAcceptedLists", ctx, listID)}
}

func (_c *ListRepository_GetAcceptedLists_Call) Run(run func(ctx context.Context, listID string)) *ListRepository_GetAcceptedLists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ListRepository_GetAcceptedLists_Call) Return(_a0 []models.Access, _a1 error) *ListRepository_GetAcceptedLists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ListRepository_GetAcceptedLists_Call) RunAndReturn(run func(context.Context, string) ([]models.Access, error)) *ListRepository_GetAcceptedLists_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccess provides a mock function with given fields: ctx, listID, userID
func (_m *ListRepository) GetAccess(ctx context.Context, listID string, userID string) (models.Access, error) {
	ret := _m.Called(ctx, listID, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAccess")
	}

	var r0 models.Access
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (models.Access, error)); ok {
		return rf(ctx, listID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) models.Access); ok {
		r0 = rf(ctx, listID, userID)
	} else {
		r0 = ret.Get(0).(models.Access)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, listID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRepository_GetAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccess'
type ListRepository_GetAccess_Call struct {
	*mock.Call
}

// GetAccess is a helper method to define mock.On call
//   - ctx context.Context
//   - listID string
//   - userID string
func (_e *ListRepository_Expecter) GetAccess(ctx interface{}, listID interface{}, userID interface{}) *ListRepository_GetAccess_Call {
	return &ListRepository_GetAccess_Call{Call: _e.mock.On("GetAccess", ctx, listID, userID)}
}

func (_c *ListRepository_GetAccess_Call) Run(run func(ctx context.Context, listID string, userID string)) *ListRepository_GetAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ListRepository_GetAccess_Call) Return(_a0 models.Access, _a1 error) *ListRepository_GetAccess_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ListRepository_GetAccess_Call) RunAndReturn(run func(context.Context, string, string) (models.Access, error)) *ListRepository_GetAccess_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccessesByListID provides a mock function with given fields: ctx, listID
func (_m *ListRepository) GetAccessesByListID(ctx context.Context, listID string) ([]models.Access, error) {
	ret := _m.Called(ctx, listID)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessesByListID")
	}

	var r0 []models.Access
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]models.Access, error)); ok {
		return rf(ctx, listID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.Access); ok {
		r0 = rf(ctx, listID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Access)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, listID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRepository_GetAccessesByListID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessesByListID'
type ListRepository_GetAccessesByListID_Call struct {
	*mock.Call
}

// GetAccessesByListID is a helper method to define mock.On call
//   - ctx context.Context
//   - listID string
func (_e *ListRepository_Expecter) GetAccessesByListID(ctx interface{}, listID interface{}) *ListRepository_GetAccessesByListID_Call {
	return &ListRepository_GetAccessesByListID_Call{Call: _e.mock.On("GetAccessesByListID", ctx, listID)}
}

func (_c *ListRepository_GetAccessesByListID_Call) Run(run func(ctx context.Context, listID string)) *ListRepository_GetAccessesByListID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ListRepository_GetAccessesByListID_Call) Return(_a0 []models.Access, _a1 error) *ListRepository_GetAccessesByListID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ListRepository_GetAccessesByListID_Call) RunAndReturn(run func(context.Context, string) ([]models.Access, error)) *ListRepository_GetAccessesByListID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx
func (_m *ListRepository) GetAll(ctx context.Context) ([]models.List, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []models.List
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.List, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.List); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.List)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type ListRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ListRepository_Expecter) GetAll(ctx interface{}) *ListRepository_GetAll_Call {
	return &ListRepository_GetAll_Call{Call: _e.mock.On("GetAll", ctx)}
}

func (_c *ListRepository_GetAll_Call) Run(run func(ctx context.Context)) *ListRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ListRepository_GetAll_Call) Return(_a0 []models.List, _a1 error) *ListRepository_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ListRepository_GetAll_Call) RunAndReturn(run func(context.Context) ([]models.List, error)) *ListRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTodosForList provides a mock function with given fields: ctx, listID
func (_m *ListRepository) GetAllTodosForList(ctx context.Context, listID string) ([]models.Todo, error) {
	ret := _m.Called(ctx, listID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTodosForList")
	}

	var r0 []models.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]models.Todo, error)); ok {
		return rf(ctx, listID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.Todo); ok {
		r0 = rf(ctx, listID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, listID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRepository_GetAllTodosForList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTodosForList'
type ListRepository_GetAllTodosForList_Call struct {
	*mock.Call
}

// GetAllTodosForList is a helper method to define mock.On call
//   - ctx context.Context
//   - listID string
func (_e *ListRepository_Expecter) GetAllTodosForList(ctx interface{}, listID interface{}) *ListRepository_GetAllTodosForList_Call {
	return &ListRepository_GetAllTodosForList_Call{Call: _e.mock.On("GetAllTodosForList", ctx, listID)}
}

func (_c *ListRepository_GetAllTodosForList_Call) Run(run func(ctx context.Context, listID string)) *ListRepository_GetAllTodosForList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ListRepository_GetAllTodosForList_Call) Return(_a0 []models.Todo, _a1 error) *ListRepository_GetAllTodosForList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ListRepository_GetAllTodosForList_Call) RunAndReturn(run func(context.Context, string) ([]models.Todo, error)) *ListRepository_GetAllTodosForList_Call {
	_c.Call.Return(run)
	return _c
}

// GetListOwnerID provides a mock function with given fields: ctx, listID
func (_m *ListRepository) GetListOwnerID(ctx context.Context, listID string) (string, error) {
	ret := _m.Called(ctx, listID)

	if len(ret) == 0 {
		panic("no return value specified for GetListOwnerID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, listID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, listID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, listID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRepository_GetListOwnerID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetListOwnerID'
type ListRepository_GetListOwnerID_Call struct {
	*mock.Call
}

// GetListOwnerID is a helper method to define mock.On call
//   - ctx context.Context
//   - listID string
func (_e *ListRepository_Expecter) GetListOwnerID(ctx interface{}, listID interface{}) *ListRepository_GetListOwnerID_Call {
	return &ListRepository_GetListOwnerID_Call{Call: _e.mock.On("GetListOwnerID", ctx, listID)}
}

func (_c *ListRepository_GetListOwnerID_Call) Run(run func(ctx context.Context, listID string)) *ListRepository_GetListOwnerID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ListRepository_GetListOwnerID_Call) Return(_a0 string, _a1 error) *ListRepository_GetListOwnerID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ListRepository_GetListOwnerID_Call) RunAndReturn(run func(context.Context, string) (string, error)) *ListRepository_GetListOwnerID_Call {
	_c.Call.Return(run)
	return _c
}

// GetPendingLists provides a mock function with given fields: ctx, userID
func (_m *ListRepository) GetPendingLists(ctx context.Context, userID string) ([]models.Access, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetPendingLists")
	}

	var r0 []models.Access
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]models.Access, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.Access); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Access)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRepository_GetPendingLists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPendingLists'
type ListRepository_GetPendingLists_Call struct {
	*mock.Call
}

// GetPendingLists is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *ListRepository_Expecter) GetPendingLists(ctx interface{}, userID interface{}) *ListRepository_GetPendingLists_Call {
	return &ListRepository_GetPendingLists_Call{Call: _e.mock.On("GetPendingLists", ctx, userID)}
}

func (_c *ListRepository_GetPendingLists_Call) Run(run func(ctx context.Context, userID string)) *ListRepository_GetPendingLists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ListRepository_GetPendingLists_Call) Return(_a0 []models.Access, _a1 error) *ListRepository_GetPendingLists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ListRepository_GetPendingLists_Call) RunAndReturn(run func(context.Context, string) ([]models.Access, error)) *ListRepository_GetPendingLists_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsersByListID provides a mock function with given fields: ctx, listID
func (_m *ListRepository) GetUsersByListID(ctx context.Context, listID string) ([]models.Access, error) {
	ret := _m.Called(ctx, listID)

	if len(ret) == 0 {
		panic("no return value specified for GetUsersByListID")
	}

	var r0 []models.Access
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]models.Access, error)); ok {
		return rf(ctx, listID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.Access); ok {
		r0 = rf(ctx, listID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Access)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, listID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRepository_GetUsersByListID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsersByListID'
type ListRepository_GetUsersByListID_Call struct {
	*mock.Call
}

// GetUsersByListID is a helper method to define mock.On call
//   - ctx context.Context
//   - listID string
func (_e *ListRepository_Expecter) GetUsersByListID(ctx interface{}, listID interface{}) *ListRepository_GetUsersByListID_Call {
	return &ListRepository_GetUsersByListID_Call{Call: _e.mock.On("GetUsersByListID", ctx, listID)}
}

func (_c *ListRepository_GetUsersByListID_Call) Run(run func(ctx context.Context, listID string)) *ListRepository_GetUsersByListID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ListRepository_GetUsersByListID_Call) Return(_a0 []models.Access, _a1 error) *ListRepository_GetUsersByListID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ListRepository_GetUsersByListID_Call) RunAndReturn(run func(context.Context, string) ([]models.Access, error)) *ListRepository_GetUsersByListID_Call {
	_c.Call.Return(run)
	return _c
}

// ListAllByUserID provides a mock function with given fields: ctx, userID
func (_m *ListRepository) ListAllByUserID(ctx context.Context, userID string) ([]models.Access, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for ListAllByUserID")
	}

	var r0 []models.Access
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]models.Access, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.Access); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Access)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRepository_ListAllByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAllByUserID'
type ListRepository_ListAllByUserID_Call struct {
	*mock.Call
}

// ListAllByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *ListRepository_Expecter) ListAllByUserID(ctx interface{}, userID interface{}) *ListRepository_ListAllByUserID_Call {
	return &ListRepository_ListAllByUserID_Call{Call: _e.mock.On("ListAllByUserID", ctx, userID)}
}

func (_c *ListRepository_ListAllByUserID_Call) Run(run func(ctx context.Context, userID string)) *ListRepository_ListAllByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ListRepository_ListAllByUserID_Call) Return(_a0 []models.Access, _a1 error) *ListRepository_ListAllByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ListRepository_ListAllByUserID_Call) RunAndReturn(run func(context.Context, string) ([]models.Access, error)) *ListRepository_ListAllByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, list
func (_m *ListRepository) Update(ctx context.Context, list models.List) error {
	ret := _m.Called(ctx, list)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.List) error); ok {
		r0 = rf(ctx, list)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type ListRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - list models.List
func (_e *ListRepository_Expecter) Update(ctx interface{}, list interface{}) *ListRepository_Update_Call {
	return &ListRepository_Update_Call{Call: _e.mock.On("Update", ctx, list)}
}

func (_c *ListRepository_Update_Call) Run(run func(ctx context.Context, list models.List)) *ListRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.List))
	})
	return _c
}

func (_c *ListRepository_Update_Call) Return(_a0 error) *ListRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ListRepository_Update_Call) RunAndReturn(run func(context.Context, models.List) error) *ListRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateListDescription provides a mock function with given fields: ctx, listID, description
func (_m *ListRepository) UpdateListDescription(ctx context.Context, listID string, description string) (models.List, error) {
	ret := _m.Called(ctx, listID, description)

	if len(ret) == 0 {
		panic("no return value specified for UpdateListDescription")
	}

	var r0 models.List
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (models.List, error)); ok {
		return rf(ctx, listID, description)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) models.List); ok {
		r0 = rf(ctx, listID, description)
	} else {
		r0 = ret.Get(0).(models.List)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, listID, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRepository_UpdateListDescription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateListDescription'
type ListRepository_UpdateListDescription_Call struct {
	*mock.Call
}

// UpdateListDescription is a helper method to define mock.On call
//   - ctx context.Context
//   - listID string
//   - description string
func (_e *ListRepository_Expecter) UpdateListDescription(ctx interface{}, listID interface{}, description interface{}) *ListRepository_UpdateListDescription_Call {
	return &ListRepository_UpdateListDescription_Call{Call: _e.mock.On("UpdateListDescription", ctx, listID, description)}
}

func (_c *ListRepository_UpdateListDescription_Call) Run(run func(ctx context.Context, listID string, description string)) *ListRepository_UpdateListDescription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ListRepository_UpdateListDescription_Call) Return(_a0 models.List, _a1 error) *ListRepository_UpdateListDescription_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ListRepository_UpdateListDescription_Call) RunAndReturn(run func(context.Context, string, string) (models.List, error)) *ListRepository_UpdateListDescription_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateListName provides a mock function with given fields: ctx, listID, name
func (_m *ListRepository) UpdateListName(ctx context.Context, listID string, name string) (models.List, error) {
	ret := _m.Called(ctx, listID, name)

	if len(ret) == 0 {
		panic("no return value specified for UpdateListName")
	}

	var r0 models.List
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (models.List, error)); ok {
		return rf(ctx, listID, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) models.List); ok {
		r0 = rf(ctx, listID, name)
	} else {
		r0 = ret.Get(0).(models.List)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, listID, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRepository_UpdateListName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateListName'
type ListRepository_UpdateListName_Call struct {
	*mock.Call
}

// UpdateListName is a helper method to define mock.On call
//   - ctx context.Context
//   - listID string
//   - name string
func (_e *ListRepository_Expecter) UpdateListName(ctx interface{}, listID interface{}, name interface{}) *ListRepository_UpdateListName_Call {
	return &ListRepository_UpdateListName_Call{Call: _e.mock.On("UpdateListName", ctx, listID, name)}
}

func (_c *ListRepository_UpdateListName_Call) Run(run func(ctx context.Context, listID string, name string)) *ListRepository_UpdateListName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ListRepository_UpdateListName_Call) Return(_a0 models.List, _a1 error) *ListRepository_UpdateListName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ListRepository_UpdateListName_Call) RunAndReturn(run func(context.Context, string, string) (models.List, error)) *ListRepository_UpdateListName_Call {
	_c.Call.Return(run)
	return _c
}

// NewListRepository creates a new instance of ListRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewListRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ListRepository {
	mock := &ListRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
