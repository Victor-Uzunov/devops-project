// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/Victor-Uzunov/devops-project/todoservice/pkg/models"
)

// ListService is an autogenerated mock type for the ListService type
type ListService struct {
	mock.Mock
}

type ListService_Expecter struct {
	mock *mock.Mock
}

func (_m *ListService) EXPECT() *ListService_Expecter {
	return &ListService_Expecter{mock: &_m.Mock}
}

// AcceptList provides a mock function with given fields: ctx, listID, userID
func (_m *ListService) AcceptList(ctx context.Context, listID string, userID string) error {
	ret := _m.Called(ctx, listID, userID)

	if len(ret) == 0 {
		panic("no return value specified for AcceptList")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, listID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListService_AcceptList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AcceptList'
type ListService_AcceptList_Call struct {
	*mock.Call
}

// AcceptList is a helper method to define mock.On call
//   - ctx context.Context
//   - listID string
//   - userID string
func (_e *ListService_Expecter) AcceptList(ctx interface{}, listID interface{}, userID interface{}) *ListService_AcceptList_Call {
	return &ListService_AcceptList_Call{Call: _e.mock.On("AcceptList", ctx, listID, userID)}
}

func (_c *ListService_AcceptList_Call) Run(run func(ctx context.Context, listID string, userID string)) *ListService_AcceptList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ListService_AcceptList_Call) Return(_a0 error) *ListService_AcceptList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ListService_AcceptList_Call) RunAndReturn(run func(context.Context, string, string) error) *ListService_AcceptList_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAccess provides a mock function with given fields: ctx, list
func (_m *ListService) CreateAccess(ctx context.Context, list models.Access) (models.Access, error) {
	ret := _m.Called(ctx, list)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccess")
	}

	var r0 models.Access
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Access) (models.Access, error)); ok {
		return rf(ctx, list)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Access) models.Access); ok {
		r0 = rf(ctx, list)
	} else {
		r0 = ret.Get(0).(models.Access)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Access) error); ok {
		r1 = rf(ctx, list)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListService_CreateAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccess'
type ListService_CreateAccess_Call struct {
	*mock.Call
}

// CreateAccess is a helper method to define mock.On call
//   - ctx context.Context
//   - list models.Access
func (_e *ListService_Expecter) CreateAccess(ctx interface{}, list interface{}) *ListService_CreateAccess_Call {
	return &ListService_CreateAccess_Call{Call: _e.mock.On("CreateAccess", ctx, list)}
}

func (_c *ListService_CreateAccess_Call) Run(run func(ctx context.Context, list models.Access)) *ListService_CreateAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Access))
	})
	return _c
}

func (_c *ListService_CreateAccess_Call) Return(_a0 models.Access, _a1 error) *ListService_CreateAccess_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ListService_CreateAccess_Call) RunAndReturn(run func(context.Context, models.Access) (models.Access, error)) *ListService_CreateAccess_Call {
	_c.Call.Return(run)
	return _c
}

// CreateList provides a mock function with given fields: ctx, list
func (_m *ListService) CreateList(ctx context.Context, list models.List) (string, error) {
	ret := _m.Called(ctx, list)

	if len(ret) == 0 {
		panic("no return value specified for CreateList")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.List) (string, error)); ok {
		return rf(ctx, list)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.List) string); ok {
		r0 = rf(ctx, list)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.List) error); ok {
		r1 = rf(ctx, list)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListService_CreateList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateList'
type ListService_CreateList_Call struct {
	*mock.Call
}

// CreateList is a helper method to define mock.On call
//   - ctx context.Context
//   - list models.List
func (_e *ListService_Expecter) CreateList(ctx interface{}, list interface{}) *ListService_CreateList_Call {
	return &ListService_CreateList_Call{Call: _e.mock.On("CreateList", ctx, list)}
}

func (_c *ListService_CreateList_Call) Run(run func(ctx context.Context, list models.List)) *ListService_CreateList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.List))
	})
	return _c
}

func (_c *ListService_CreateList_Call) Return(_a0 string, _a1 error) *ListService_CreateList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ListService_CreateList_Call) RunAndReturn(run func(context.Context, models.List) (string, error)) *ListService_CreateList_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAccess provides a mock function with given fields: ctx, listID, userID
func (_m *ListService) DeleteAccess(ctx context.Context, listID string, userID string) error {
	ret := _m.Called(ctx, listID, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccess")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, listID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListService_DeleteAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAccess'
type ListService_DeleteAccess_Call struct {
	*mock.Call
}

// DeleteAccess is a helper method to define mock.On call
//   - ctx context.Context
//   - listID string
//   - userID string
func (_e *ListService_Expecter) DeleteAccess(ctx interface{}, listID interface{}, userID interface{}) *ListService_DeleteAccess_Call {
	return &ListService_DeleteAccess_Call{Call: _e.mock.On("DeleteAccess", ctx, listID, userID)}
}

func (_c *ListService_DeleteAccess_Call) Run(run func(ctx context.Context, listID string, userID string)) *ListService_DeleteAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ListService_DeleteAccess_Call) Return(_a0 error) *ListService_DeleteAccess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ListService_DeleteAccess_Call) RunAndReturn(run func(context.Context, string, string) error) *ListService_DeleteAccess_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteList provides a mock function with given fields: ctx, id
func (_m *ListService) DeleteList(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteList")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListService_DeleteList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteList'
type ListService_DeleteList_Call struct {
	*mock.Call
}

// DeleteList is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ListService_Expecter) DeleteList(ctx interface{}, id interface{}) *ListService_DeleteList_Call {
	return &ListService_DeleteList_Call{Call: _e.mock.On("DeleteList", ctx, id)}
}

func (_c *ListService_DeleteList_Call) Run(run func(ctx context.Context, id string)) *ListService_DeleteList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ListService_DeleteList_Call) Return(_a0 error) *ListService_DeleteList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ListService_DeleteList_Call) RunAndReturn(run func(context.Context, string) error) *ListService_DeleteList_Call {
	_c.Call.Return(run)
	return _c
}

// GetAcceptedLists provides a mock function with given fields: ctx, userID
func (_m *ListService) GetAcceptedLists(ctx context.Context, userID string) ([]models.Access, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAcceptedLists")
	}

	var r0 []models.Access
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]models.Access, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.Access); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Access)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListService_GetAcceptedLists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAcceptedLists'
type ListService_GetAcceptedLists_Call struct {
	*mock.Call
}

// GetAcceptedLists is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *ListService_Expecter) GetAcceptedLists(ctx interface{}, userID interface{}) *ListService_GetAcceptedLists_Call {
	return &ListService_GetAcceptedLists_Call{Call: _e.mock.On("GetAcceptedLists", ctx, userID)}
}

func (_c *ListService_GetAcceptedLists_Call) Run(run func(ctx context.Context, userID string)) *ListService_GetAcceptedLists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ListService_GetAcceptedLists_Call) Return(_a0 []models.Access, _a1 error) *ListService_GetAcceptedLists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ListService_GetAcceptedLists_Call) RunAndReturn(run func(context.Context, string) ([]models.Access, error)) *ListService_GetAcceptedLists_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccess provides a mock function with given fields: ctx, listID, userID
func (_m *ListService) GetAccess(ctx context.Context, listID string, userID string) (models.Access, error) {
	ret := _m.Called(ctx, listID, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAccess")
	}

	var r0 models.Access
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (models.Access, error)); ok {
		return rf(ctx, listID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) models.Access); ok {
		r0 = rf(ctx, listID, userID)
	} else {
		r0 = ret.Get(0).(models.Access)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, listID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListService_GetAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccess'
type ListService_GetAccess_Call struct {
	*mock.Call
}

// GetAccess is a helper method to define mock.On call
//   - ctx context.Context
//   - listID string
//   - userID string
func (_e *ListService_Expecter) GetAccess(ctx interface{}, listID interface{}, userID interface{}) *ListService_GetAccess_Call {
	return &ListService_GetAccess_Call{Call: _e.mock.On("GetAccess", ctx, listID, userID)}
}

func (_c *ListService_GetAccess_Call) Run(run func(ctx context.Context, listID string, userID string)) *ListService_GetAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ListService_GetAccess_Call) Return(_a0 models.Access, _a1 error) *ListService_GetAccess_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ListService_GetAccess_Call) RunAndReturn(run func(context.Context, string, string) (models.Access, error)) *ListService_GetAccess_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccessesByListID provides a mock function with given fields: ctx, listID
func (_m *ListService) GetAccessesByListID(ctx context.Context, listID string) ([]models.Access, error) {
	ret := _m.Called(ctx, listID)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessesByListID")
	}

	var r0 []models.Access
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]models.Access, error)); ok {
		return rf(ctx, listID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.Access); ok {
		r0 = rf(ctx, listID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Access)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, listID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListService_GetAccessesByListID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessesByListID'
type ListService_GetAccessesByListID_Call struct {
	*mock.Call
}

// GetAccessesByListID is a helper method to define mock.On call
//   - ctx context.Context
//   - listID string
func (_e *ListService_Expecter) GetAccessesByListID(ctx interface{}, listID interface{}) *ListService_GetAccessesByListID_Call {
	return &ListService_GetAccessesByListID_Call{Call: _e.mock.On("GetAccessesByListID", ctx, listID)}
}

func (_c *ListService_GetAccessesByListID_Call) Run(run func(ctx context.Context, listID string)) *ListService_GetAccessesByListID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ListService_GetAccessesByListID_Call) Return(_a0 []models.Access, _a1 error) *ListService_GetAccessesByListID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ListService_GetAccessesByListID_Call) RunAndReturn(run func(context.Context, string) ([]models.Access, error)) *ListService_GetAccessesByListID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllLists provides a mock function with given fields: ctx
func (_m *ListService) GetAllLists(ctx context.Context) ([]models.List, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllLists")
	}

	var r0 []models.List
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.List, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.List); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.List)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListService_GetAllLists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllLists'
type ListService_GetAllLists_Call struct {
	*mock.Call
}

// GetAllLists is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ListService_Expecter) GetAllLists(ctx interface{}) *ListService_GetAllLists_Call {
	return &ListService_GetAllLists_Call{Call: _e.mock.On("GetAllLists", ctx)}
}

func (_c *ListService_GetAllLists_Call) Run(run func(ctx context.Context)) *ListService_GetAllLists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ListService_GetAllLists_Call) Return(_a0 []models.List, _a1 error) *ListService_GetAllLists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ListService_GetAllLists_Call) RunAndReturn(run func(context.Context) ([]models.List, error)) *ListService_GetAllLists_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTodosForList provides a mock function with given fields: ctx, listID
func (_m *ListService) GetAllTodosForList(ctx context.Context, listID string) ([]models.Todo, error) {
	ret := _m.Called(ctx, listID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTodosForList")
	}

	var r0 []models.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]models.Todo, error)); ok {
		return rf(ctx, listID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.Todo); ok {
		r0 = rf(ctx, listID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, listID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListService_GetAllTodosForList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTodosForList'
type ListService_GetAllTodosForList_Call struct {
	*mock.Call
}

// GetAllTodosForList is a helper method to define mock.On call
//   - ctx context.Context
//   - listID string
func (_e *ListService_Expecter) GetAllTodosForList(ctx interface{}, listID interface{}) *ListService_GetAllTodosForList_Call {
	return &ListService_GetAllTodosForList_Call{Call: _e.mock.On("GetAllTodosForList", ctx, listID)}
}

func (_c *ListService_GetAllTodosForList_Call) Run(run func(ctx context.Context, listID string)) *ListService_GetAllTodosForList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ListService_GetAllTodosForList_Call) Return(_a0 []models.Todo, _a1 error) *ListService_GetAllTodosForList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ListService_GetAllTodosForList_Call) RunAndReturn(run func(context.Context, string) ([]models.Todo, error)) *ListService_GetAllTodosForList_Call {
	_c.Call.Return(run)
	return _c
}

// GetList provides a mock function with given fields: ctx, id
func (_m *ListService) GetList(ctx context.Context, id string) (models.List, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetList")
	}

	var r0 models.List
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.List, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.List); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.List)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListService_GetList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetList'
type ListService_GetList_Call struct {
	*mock.Call
}

// GetList is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ListService_Expecter) GetList(ctx interface{}, id interface{}) *ListService_GetList_Call {
	return &ListService_GetList_Call{Call: _e.mock.On("GetList", ctx, id)}
}

func (_c *ListService_GetList_Call) Run(run func(ctx context.Context, id string)) *ListService_GetList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ListService_GetList_Call) Return(_a0 models.List, _a1 error) *ListService_GetList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ListService_GetList_Call) RunAndReturn(run func(context.Context, string) (models.List, error)) *ListService_GetList_Call {
	_c.Call.Return(run)
	return _c
}

// GetListOwnerID provides a mock function with given fields: ctx, listID
func (_m *ListService) GetListOwnerID(ctx context.Context, listID string) (string, error) {
	ret := _m.Called(ctx, listID)

	if len(ret) == 0 {
		panic("no return value specified for GetListOwnerID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, listID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, listID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, listID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListService_GetListOwnerID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetListOwnerID'
type ListService_GetListOwnerID_Call struct {
	*mock.Call
}

// GetListOwnerID is a helper method to define mock.On call
//   - ctx context.Context
//   - listID string
func (_e *ListService_Expecter) GetListOwnerID(ctx interface{}, listID interface{}) *ListService_GetListOwnerID_Call {
	return &ListService_GetListOwnerID_Call{Call: _e.mock.On("GetListOwnerID", ctx, listID)}
}

func (_c *ListService_GetListOwnerID_Call) Run(run func(ctx context.Context, listID string)) *ListService_GetListOwnerID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ListService_GetListOwnerID_Call) Return(_a0 string, _a1 error) *ListService_GetListOwnerID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ListService_GetListOwnerID_Call) RunAndReturn(run func(context.Context, string) (string, error)) *ListService_GetListOwnerID_Call {
	_c.Call.Return(run)
	return _c
}

// GetPendingLists provides a mock function with given fields: ctx, userID
func (_m *ListService) GetPendingLists(ctx context.Context, userID string) ([]models.Access, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetPendingLists")
	}

	var r0 []models.Access
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]models.Access, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.Access); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Access)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListService_GetPendingLists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPendingLists'
type ListService_GetPendingLists_Call struct {
	*mock.Call
}

// GetPendingLists is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *ListService_Expecter) GetPendingLists(ctx interface{}, userID interface{}) *ListService_GetPendingLists_Call {
	return &ListService_GetPendingLists_Call{Call: _e.mock.On("GetPendingLists", ctx, userID)}
}

func (_c *ListService_GetPendingLists_Call) Run(run func(ctx context.Context, userID string)) *ListService_GetPendingLists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ListService_GetPendingLists_Call) Return(_a0 []models.Access, _a1 error) *ListService_GetPendingLists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ListService_GetPendingLists_Call) RunAndReturn(run func(context.Context, string) ([]models.Access, error)) *ListService_GetPendingLists_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsersByListID provides a mock function with given fields: ctx, listID
func (_m *ListService) GetUsersByListID(ctx context.Context, listID string) ([]models.Access, error) {
	ret := _m.Called(ctx, listID)

	if len(ret) == 0 {
		panic("no return value specified for GetUsersByListID")
	}

	var r0 []models.Access
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]models.Access, error)); ok {
		return rf(ctx, listID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.Access); ok {
		r0 = rf(ctx, listID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Access)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, listID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListService_GetUsersByListID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsersByListID'
type ListService_GetUsersByListID_Call struct {
	*mock.Call
}

// GetUsersByListID is a helper method to define mock.On call
//   - ctx context.Context
//   - listID string
func (_e *ListService_Expecter) GetUsersByListID(ctx interface{}, listID interface{}) *ListService_GetUsersByListID_Call {
	return &ListService_GetUsersByListID_Call{Call: _e.mock.On("GetUsersByListID", ctx, listID)}
}

func (_c *ListService_GetUsersByListID_Call) Run(run func(ctx context.Context, listID string)) *ListService_GetUsersByListID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ListService_GetUsersByListID_Call) Return(_a0 []models.Access, _a1 error) *ListService_GetUsersByListID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ListService_GetUsersByListID_Call) RunAndReturn(run func(context.Context, string) ([]models.Access, error)) *ListService_GetUsersByListID_Call {
	_c.Call.Return(run)
	return _c
}

// ListAllByUserID provides a mock function with given fields: ctx, useID
func (_m *ListService) ListAllByUserID(ctx context.Context, useID string) ([]models.Access, error) {
	ret := _m.Called(ctx, useID)

	if len(ret) == 0 {
		panic("no return value specified for ListAllByUserID")
	}

	var r0 []models.Access
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]models.Access, error)); ok {
		return rf(ctx, useID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.Access); ok {
		r0 = rf(ctx, useID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Access)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, useID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListService_ListAllByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAllByUserID'
type ListService_ListAllByUserID_Call struct {
	*mock.Call
}

// ListAllByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - useID string
func (_e *ListService_Expecter) ListAllByUserID(ctx interface{}, useID interface{}) *ListService_ListAllByUserID_Call {
	return &ListService_ListAllByUserID_Call{Call: _e.mock.On("ListAllByUserID", ctx, useID)}
}

func (_c *ListService_ListAllByUserID_Call) Run(run func(ctx context.Context, useID string)) *ListService_ListAllByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ListService_ListAllByUserID_Call) Return(_a0 []models.Access, _a1 error) *ListService_ListAllByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ListService_ListAllByUserID_Call) RunAndReturn(run func(context.Context, string) ([]models.Access, error)) *ListService_ListAllByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateList provides a mock function with given fields: ctx, list
func (_m *ListService) UpdateList(ctx context.Context, list models.List) error {
	ret := _m.Called(ctx, list)

	if len(ret) == 0 {
		panic("no return value specified for UpdateList")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.List) error); ok {
		r0 = rf(ctx, list)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListService_UpdateList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateList'
type ListService_UpdateList_Call struct {
	*mock.Call
}

// UpdateList is a helper method to define mock.On call
//   - ctx context.Context
//   - list models.List
func (_e *ListService_Expecter) UpdateList(ctx interface{}, list interface{}) *ListService_UpdateList_Call {
	return &ListService_UpdateList_Call{Call: _e.mock.On("UpdateList", ctx, list)}
}

func (_c *ListService_UpdateList_Call) Run(run func(ctx context.Context, list models.List)) *ListService_UpdateList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.List))
	})
	return _c
}

func (_c *ListService_UpdateList_Call) Return(_a0 error) *ListService_UpdateList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ListService_UpdateList_Call) RunAndReturn(run func(context.Context, models.List) error) *ListService_UpdateList_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateListDescription provides a mock function with given fields: ctx, id, description
func (_m *ListService) UpdateListDescription(ctx context.Context, id string, description string) (models.List, error) {
	ret := _m.Called(ctx, id, description)

	if len(ret) == 0 {
		panic("no return value specified for UpdateListDescription")
	}

	var r0 models.List
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (models.List, error)); ok {
		return rf(ctx, id, description)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) models.List); ok {
		r0 = rf(ctx, id, description)
	} else {
		r0 = ret.Get(0).(models.List)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, id, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListService_UpdateListDescription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateListDescription'
type ListService_UpdateListDescription_Call struct {
	*mock.Call
}

// UpdateListDescription is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - description string
func (_e *ListService_Expecter) UpdateListDescription(ctx interface{}, id interface{}, description interface{}) *ListService_UpdateListDescription_Call {
	return &ListService_UpdateListDescription_Call{Call: _e.mock.On("UpdateListDescription", ctx, id, description)}
}

func (_c *ListService_UpdateListDescription_Call) Run(run func(ctx context.Context, id string, description string)) *ListService_UpdateListDescription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ListService_UpdateListDescription_Call) Return(_a0 models.List, _a1 error) *ListService_UpdateListDescription_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ListService_UpdateListDescription_Call) RunAndReturn(run func(context.Context, string, string) (models.List, error)) *ListService_UpdateListDescription_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateListName provides a mock function with given fields: ctx, id, name
func (_m *ListService) UpdateListName(ctx context.Context, id string, name string) (models.List, error) {
	ret := _m.Called(ctx, id, name)

	if len(ret) == 0 {
		panic("no return value specified for UpdateListName")
	}

	var r0 models.List
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (models.List, error)); ok {
		return rf(ctx, id, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) models.List); ok {
		r0 = rf(ctx, id, name)
	} else {
		r0 = ret.Get(0).(models.List)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, id, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListService_UpdateListName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateListName'
type ListService_UpdateListName_Call struct {
	*mock.Call
}

// UpdateListName is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - name string
func (_e *ListService_Expecter) UpdateListName(ctx interface{}, id interface{}, name interface{}) *ListService_UpdateListName_Call {
	return &ListService_UpdateListName_Call{Call: _e.mock.On("UpdateListName", ctx, id, name)}
}

func (_c *ListService_UpdateListName_Call) Run(run func(ctx context.Context, id string, name string)) *ListService_UpdateListName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ListService_UpdateListName_Call) Return(_a0 models.List, _a1 error) *ListService_UpdateListName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ListService_UpdateListName_Call) RunAndReturn(run func(context.Context, string, string) (models.List, error)) *ListService_UpdateListName_Call {
	_c.Call.Return(run)
	return _c
}

// NewListService creates a new instance of ListService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewListService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ListService {
	mock := &ListService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
