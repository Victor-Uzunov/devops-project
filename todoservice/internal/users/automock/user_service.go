// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "github.com/Victor-Uzunov/devops-project/todoservice/pkg/models"

	time "time"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

type UserService_Expecter struct {
	mock *mock.Mock
}

func (_m *UserService) EXPECT() *UserService_Expecter {
	return &UserService_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, list
func (_m *UserService) CreateUser(ctx context.Context, list models.User) (string, error) {
	ret := _m.Called(ctx, list)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User) (string, error)); ok {
		return rf(ctx, list)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.User) string); ok {
		r0 = rf(ctx, list)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.User) error); ok {
		r1 = rf(ctx, list)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type UserService_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - list models.User
func (_e *UserService_Expecter) CreateUser(ctx interface{}, list interface{}) *UserService_CreateUser_Call {
	return &UserService_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, list)}
}

func (_c *UserService_CreateUser_Call) Run(run func(ctx context.Context, list models.User)) *UserService_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.User))
	})
	return _c
}

func (_c *UserService_CreateUser_Call) Return(_a0 string, _a1 error) *UserService_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_CreateUser_Call) RunAndReturn(run func(context.Context, models.User) (string, error)) *UserService_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: ctx, id
func (_m *UserService) DeleteUser(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type UserService_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *UserService_Expecter) DeleteUser(ctx interface{}, id interface{}) *UserService_DeleteUser_Call {
	return &UserService_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, id)}
}

func (_c *UserService_DeleteUser_Call) Run(run func(ctx context.Context, id string)) *UserService_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserService_DeleteUser_Call) Return(_a0 error) *UserService_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserService_DeleteUser_Call) RunAndReturn(run func(context.Context, string) error) *UserService_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// FindByRefreshToken provides a mock function with given fields: ctx, refreshToken
func (_m *UserService) FindByRefreshToken(ctx context.Context, refreshToken string) (models.User, error) {
	ret := _m.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for FindByRefreshToken")
	}

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.User, error)); ok {
		return rf(ctx, refreshToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.User); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_FindByRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByRefreshToken'
type UserService_FindByRefreshToken_Call struct {
	*mock.Call
}

// FindByRefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - refreshToken string
func (_e *UserService_Expecter) FindByRefreshToken(ctx interface{}, refreshToken interface{}) *UserService_FindByRefreshToken_Call {
	return &UserService_FindByRefreshToken_Call{Call: _e.mock.On("FindByRefreshToken", ctx, refreshToken)}
}

func (_c *UserService_FindByRefreshToken_Call) Run(run func(ctx context.Context, refreshToken string)) *UserService_FindByRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserService_FindByRefreshToken_Call) Return(_a0 models.User, _a1 error) *UserService_FindByRefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_FindByRefreshToken_Call) RunAndReturn(run func(context.Context, string) (models.User, error)) *UserService_FindByRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllUsers provides a mock function with given fields: ctx
func (_m *UserService) GetAllUsers(ctx context.Context) ([]models.User, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 []models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_GetAllUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUsers'
type UserService_GetAllUsers_Call struct {
	*mock.Call
}

// GetAllUsers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UserService_Expecter) GetAllUsers(ctx interface{}) *UserService_GetAllUsers_Call {
	return &UserService_GetAllUsers_Call{Call: _e.mock.On("GetAllUsers", ctx)}
}

func (_c *UserService_GetAllUsers_Call) Run(run func(ctx context.Context)) *UserService_GetAllUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UserService_GetAllUsers_Call) Return(_a0 []models.User, _a1 error) *UserService_GetAllUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_GetAllUsers_Call) RunAndReturn(run func(context.Context) ([]models.User, error)) *UserService_GetAllUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: ctx, id
func (_m *UserService) GetUser(ctx context.Context, id string) (models.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type UserService_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *UserService_Expecter) GetUser(ctx interface{}, id interface{}) *UserService_GetUser_Call {
	return &UserService_GetUser_Call{Call: _e.mock.On("GetUser", ctx, id)}
}

func (_c *UserService_GetUser_Call) Run(run func(ctx context.Context, id string)) *UserService_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserService_GetUser_Call) Return(_a0 models.User, _a1 error) *UserService_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_GetUser_Call) RunAndReturn(run func(context.Context, string) (models.User, error)) *UserService_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function with given fields: ctx, username
func (_m *UserService) GetUserByEmail(ctx context.Context, username string) (models.User, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.User); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type UserService_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *UserService_Expecter) GetUserByEmail(ctx interface{}, username interface{}) *UserService_GetUserByEmail_Call {
	return &UserService_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, username)}
}

func (_c *UserService_GetUserByEmail_Call) Run(run func(ctx context.Context, username string)) *UserService_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserService_GetUserByEmail_Call) Return(_a0 models.User, _a1 error) *UserService_GetUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_GetUserByEmail_Call) RunAndReturn(run func(context.Context, string) (models.User, error)) *UserService_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// Logout provides a mock function with given fields: ctx, email
func (_m *UserService) Logout(ctx context.Context, email string) error {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type UserService_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *UserService_Expecter) Logout(ctx interface{}, email interface{}) *UserService_Logout_Call {
	return &UserService_Logout_Call{Call: _e.mock.On("Logout", ctx, email)}
}

func (_c *UserService_Logout_Call) Run(run func(ctx context.Context, email string)) *UserService_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserService_Logout_Call) Return(_a0 error) *UserService_Logout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserService_Logout_Call) RunAndReturn(run func(context.Context, string) error) *UserService_Logout_Call {
	_c.Call.Return(run)
	return _c
}

// SaveRefreshToken provides a mock function with given fields: ctx, email, refreshToken, expirationTime
func (_m *UserService) SaveRefreshToken(ctx context.Context, email string, refreshToken string, expirationTime time.Time) error {
	ret := _m.Called(ctx, email, refreshToken, expirationTime)

	if len(ret) == 0 {
		panic("no return value specified for SaveRefreshToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Time) error); ok {
		r0 = rf(ctx, email, refreshToken, expirationTime)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_SaveRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveRefreshToken'
type UserService_SaveRefreshToken_Call struct {
	*mock.Call
}

// SaveRefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - refreshToken string
//   - expirationTime time.Time
func (_e *UserService_Expecter) SaveRefreshToken(ctx interface{}, email interface{}, refreshToken interface{}, expirationTime interface{}) *UserService_SaveRefreshToken_Call {
	return &UserService_SaveRefreshToken_Call{Call: _e.mock.On("SaveRefreshToken", ctx, email, refreshToken, expirationTime)}
}

func (_c *UserService_SaveRefreshToken_Call) Run(run func(ctx context.Context, email string, refreshToken string, expirationTime time.Time)) *UserService_SaveRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(time.Time))
	})
	return _c
}

func (_c *UserService_SaveRefreshToken_Call) Return(_a0 error) *UserService_SaveRefreshToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserService_SaveRefreshToken_Call) RunAndReturn(run func(context.Context, string, string, time.Time) error) *UserService_SaveRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, todo
func (_m *UserService) UpdateUser(ctx context.Context, todo models.User) error {
	ret := _m.Called(ctx, todo)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User) error); ok {
		r0 = rf(ctx, todo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type UserService_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - todo models.User
func (_e *UserService_Expecter) UpdateUser(ctx interface{}, todo interface{}) *UserService_UpdateUser_Call {
	return &UserService_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, todo)}
}

func (_c *UserService_UpdateUser_Call) Run(run func(ctx context.Context, todo models.User)) *UserService_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.User))
	})
	return _c
}

func (_c *UserService_UpdateUser_Call) Return(_a0 error) *UserService_UpdateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserService_UpdateUser_Call) RunAndReturn(run func(context.Context, models.User) error) *UserService_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
