// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "github.com/Victor-Uzunov/devops-project/todoservice/pkg/models"

	time "time"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

type UserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepository) EXPECT() *UserRepository_Expecter {
	return &UserRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, user
func (_m *UserRepository) Create(ctx context.Context, user models.User) (string, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User) (string, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.User) string); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type UserRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - user models.User
func (_e *UserRepository_Expecter) Create(ctx interface{}, user interface{}) *UserRepository_Create_Call {
	return &UserRepository_Create_Call{Call: _e.mock.On("Create", ctx, user)}
}

func (_c *UserRepository_Create_Call) Run(run func(ctx context.Context, user models.User)) *UserRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.User))
	})
	return _c
}

func (_c *UserRepository_Create_Call) Return(_a0 string, _a1 error) *UserRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepository_Create_Call) RunAndReturn(run func(context.Context, models.User) (string, error)) *UserRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *UserRepository) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type UserRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *UserRepository_Expecter) Delete(ctx interface{}, id interface{}) *UserRepository_Delete_Call {
	return &UserRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *UserRepository_Delete_Call) Run(run func(ctx context.Context, id string)) *UserRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserRepository_Delete_Call) Return(_a0 error) *UserRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepository_Delete_Call) RunAndReturn(run func(context.Context, string) error) *UserRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindByRefreshToken provides a mock function with given fields: ctx, refreshToken
func (_m *UserRepository) FindByRefreshToken(ctx context.Context, refreshToken string) (models.User, error) {
	ret := _m.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for FindByRefreshToken")
	}

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.User, error)); ok {
		return rf(ctx, refreshToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.User); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_FindByRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByRefreshToken'
type UserRepository_FindByRefreshToken_Call struct {
	*mock.Call
}

// FindByRefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - refreshToken string
func (_e *UserRepository_Expecter) FindByRefreshToken(ctx interface{}, refreshToken interface{}) *UserRepository_FindByRefreshToken_Call {
	return &UserRepository_FindByRefreshToken_Call{Call: _e.mock.On("FindByRefreshToken", ctx, refreshToken)}
}

func (_c *UserRepository_FindByRefreshToken_Call) Run(run func(ctx context.Context, refreshToken string)) *UserRepository_FindByRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserRepository_FindByRefreshToken_Call) Return(_a0 models.User, _a1 error) *UserRepository_FindByRefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepository_FindByRefreshToken_Call) RunAndReturn(run func(context.Context, string) (models.User, error)) *UserRepository_FindByRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *UserRepository) Get(ctx context.Context, id string) (models.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type UserRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *UserRepository_Expecter) Get(ctx interface{}, id interface{}) *UserRepository_Get_Call {
	return &UserRepository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *UserRepository_Get_Call) Run(run func(ctx context.Context, id string)) *UserRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserRepository_Get_Call) Return(_a0 models.User, _a1 error) *UserRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepository_Get_Call) RunAndReturn(run func(context.Context, string) (models.User, error)) *UserRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx
func (_m *UserRepository) GetAll(ctx context.Context) ([]models.User, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type UserRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UserRepository_Expecter) GetAll(ctx interface{}) *UserRepository_GetAll_Call {
	return &UserRepository_GetAll_Call{Call: _e.mock.On("GetAll", ctx)}
}

func (_c *UserRepository_GetAll_Call) Run(run func(ctx context.Context)) *UserRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UserRepository_GetAll_Call) Return(_a0 []models.User, _a1 error) *UserRepository_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepository_GetAll_Call) RunAndReturn(run func(context.Context) ([]models.User, error)) *UserRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByEmail provides a mock function with given fields: ctx, email
func (_m *UserRepository) GetByEmail(ctx context.Context, email string) (models.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_GetByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEmail'
type UserRepository_GetByEmail_Call struct {
	*mock.Call
}

// GetByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *UserRepository_Expecter) GetByEmail(ctx interface{}, email interface{}) *UserRepository_GetByEmail_Call {
	return &UserRepository_GetByEmail_Call{Call: _e.mock.On("GetByEmail", ctx, email)}
}

func (_c *UserRepository_GetByEmail_Call) Run(run func(ctx context.Context, email string)) *UserRepository_GetByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserRepository_GetByEmail_Call) Return(_a0 models.User, _a1 error) *UserRepository_GetByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepository_GetByEmail_Call) RunAndReturn(run func(context.Context, string) (models.User, error)) *UserRepository_GetByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// Logout provides a mock function with given fields: ctx, email
func (_m *UserRepository) Logout(ctx context.Context, email string) error {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepository_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type UserRepository_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *UserRepository_Expecter) Logout(ctx interface{}, email interface{}) *UserRepository_Logout_Call {
	return &UserRepository_Logout_Call{Call: _e.mock.On("Logout", ctx, email)}
}

func (_c *UserRepository_Logout_Call) Run(run func(ctx context.Context, email string)) *UserRepository_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserRepository_Logout_Call) Return(_a0 error) *UserRepository_Logout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepository_Logout_Call) RunAndReturn(run func(context.Context, string) error) *UserRepository_Logout_Call {
	_c.Call.Return(run)
	return _c
}

// SaveRefreshToken provides a mock function with given fields: ctx, email, refreshToken, expirationTime
func (_m *UserRepository) SaveRefreshToken(ctx context.Context, email string, refreshToken string, expirationTime time.Time) error {
	ret := _m.Called(ctx, email, refreshToken, expirationTime)

	if len(ret) == 0 {
		panic("no return value specified for SaveRefreshToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Time) error); ok {
		r0 = rf(ctx, email, refreshToken, expirationTime)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepository_SaveRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveRefreshToken'
type UserRepository_SaveRefreshToken_Call struct {
	*mock.Call
}

// SaveRefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - refreshToken string
//   - expirationTime time.Time
func (_e *UserRepository_Expecter) SaveRefreshToken(ctx interface{}, email interface{}, refreshToken interface{}, expirationTime interface{}) *UserRepository_SaveRefreshToken_Call {
	return &UserRepository_SaveRefreshToken_Call{Call: _e.mock.On("SaveRefreshToken", ctx, email, refreshToken, expirationTime)}
}

func (_c *UserRepository_SaveRefreshToken_Call) Run(run func(ctx context.Context, email string, refreshToken string, expirationTime time.Time)) *UserRepository_SaveRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(time.Time))
	})
	return _c
}

func (_c *UserRepository_SaveRefreshToken_Call) Return(_a0 error) *UserRepository_SaveRefreshToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepository_SaveRefreshToken_Call) RunAndReturn(run func(context.Context, string, string, time.Time) error) *UserRepository_SaveRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, user
func (_m *UserRepository) Update(ctx context.Context, user models.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type UserRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - user models.User
func (_e *UserRepository_Expecter) Update(ctx interface{}, user interface{}) *UserRepository_Update_Call {
	return &UserRepository_Update_Call{Call: _e.mock.On("Update", ctx, user)}
}

func (_c *UserRepository_Update_Call) Run(run func(ctx context.Context, user models.User)) *UserRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.User))
	})
	return _c
}

func (_c *UserRepository_Update_Call) Return(_a0 error) *UserRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepository_Update_Call) RunAndReturn(run func(context.Context, models.User) error) *UserRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
