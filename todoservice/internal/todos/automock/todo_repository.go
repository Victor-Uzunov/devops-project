// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	constants "github.com/Victor-Uzunov/devops-project/todoservice/pkg/constants"

	mock "github.com/stretchr/testify/mock"

	models "github.com/Victor-Uzunov/devops-project/todoservice/pkg/models"
)

// TodoRepository is an autogenerated mock type for the TodoRepository type
type TodoRepository struct {
	mock.Mock
}

type TodoRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *TodoRepository) EXPECT() *TodoRepository_Expecter {
	return &TodoRepository_Expecter{mock: &_m.Mock}
}

// CompleteTodo provides a mock function with given fields: ctx, id
func (_m *TodoRepository) CompleteTodo(ctx context.Context, id string) (models.Todo, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for CompleteTodo")
	}

	var r0 models.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.Todo, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.Todo); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Todo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TodoRepository_CompleteTodo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompleteTodo'
type TodoRepository_CompleteTodo_Call struct {
	*mock.Call
}

// CompleteTodo is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *TodoRepository_Expecter) CompleteTodo(ctx interface{}, id interface{}) *TodoRepository_CompleteTodo_Call {
	return &TodoRepository_CompleteTodo_Call{Call: _e.mock.On("CompleteTodo", ctx, id)}
}

func (_c *TodoRepository_CompleteTodo_Call) Run(run func(ctx context.Context, id string)) *TodoRepository_CompleteTodo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TodoRepository_CompleteTodo_Call) Return(_a0 models.Todo, _a1 error) *TodoRepository_CompleteTodo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TodoRepository_CompleteTodo_Call) RunAndReturn(run func(context.Context, string) (models.Todo, error)) *TodoRepository_CompleteTodo_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, list
func (_m *TodoRepository) Create(ctx context.Context, list models.Todo) (string, error) {
	ret := _m.Called(ctx, list)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Todo) (string, error)); ok {
		return rf(ctx, list)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Todo) string); ok {
		r0 = rf(ctx, list)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Todo) error); ok {
		r1 = rf(ctx, list)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TodoRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type TodoRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - list models.Todo
func (_e *TodoRepository_Expecter) Create(ctx interface{}, list interface{}) *TodoRepository_Create_Call {
	return &TodoRepository_Create_Call{Call: _e.mock.On("Create", ctx, list)}
}

func (_c *TodoRepository_Create_Call) Run(run func(ctx context.Context, list models.Todo)) *TodoRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Todo))
	})
	return _c
}

func (_c *TodoRepository_Create_Call) Return(_a0 string, _a1 error) *TodoRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TodoRepository_Create_Call) RunAndReturn(run func(context.Context, models.Todo) (string, error)) *TodoRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *TodoRepository) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TodoRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type TodoRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *TodoRepository_Expecter) Delete(ctx interface{}, id interface{}) *TodoRepository_Delete_Call {
	return &TodoRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *TodoRepository_Delete_Call) Run(run func(ctx context.Context, id string)) *TodoRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TodoRepository_Delete_Call) Return(_a0 error) *TodoRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TodoRepository_Delete_Call) RunAndReturn(run func(context.Context, string) error) *TodoRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *TodoRepository) Get(ctx context.Context, id string) (models.Todo, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 models.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.Todo, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.Todo); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Todo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TodoRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type TodoRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *TodoRepository_Expecter) Get(ctx interface{}, id interface{}) *TodoRepository_Get_Call {
	return &TodoRepository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *TodoRepository_Get_Call) Run(run func(ctx context.Context, id string)) *TodoRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TodoRepository_Get_Call) Return(_a0 models.Todo, _a1 error) *TodoRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TodoRepository_Get_Call) RunAndReturn(run func(context.Context, string) (models.Todo, error)) *TodoRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx
func (_m *TodoRepository) GetAll(ctx context.Context) ([]models.Todo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []models.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Todo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Todo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TodoRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type TodoRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *TodoRepository_Expecter) GetAll(ctx interface{}) *TodoRepository_GetAll_Call {
	return &TodoRepository_GetAll_Call{Call: _e.mock.On("GetAll", ctx)}
}

func (_c *TodoRepository_GetAll_Call) Run(run func(ctx context.Context)) *TodoRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *TodoRepository_GetAll_Call) Return(_a0 []models.Todo, _a1 error) *TodoRepository_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TodoRepository_GetAll_Call) RunAndReturn(run func(context.Context) ([]models.Todo, error)) *TodoRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllByListID provides a mock function with given fields: ctx, listID
func (_m *TodoRepository) GetAllByListID(ctx context.Context, listID string) ([]models.Todo, error) {
	ret := _m.Called(ctx, listID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllByListID")
	}

	var r0 []models.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]models.Todo, error)); ok {
		return rf(ctx, listID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.Todo); ok {
		r0 = rf(ctx, listID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, listID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TodoRepository_GetAllByListID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllByListID'
type TodoRepository_GetAllByListID_Call struct {
	*mock.Call
}

// GetAllByListID is a helper method to define mock.On call
//   - ctx context.Context
//   - listID string
func (_e *TodoRepository_Expecter) GetAllByListID(ctx interface{}, listID interface{}) *TodoRepository_GetAllByListID_Call {
	return &TodoRepository_GetAllByListID_Call{Call: _e.mock.On("GetAllByListID", ctx, listID)}
}

func (_c *TodoRepository_GetAllByListID_Call) Run(run func(ctx context.Context, listID string)) *TodoRepository_GetAllByListID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TodoRepository_GetAllByListID_Call) Return(_a0 []models.Todo, _a1 error) *TodoRepository_GetAllByListID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TodoRepository_GetAllByListID_Call) RunAndReturn(run func(context.Context, string) ([]models.Todo, error)) *TodoRepository_GetAllByListID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, todo
func (_m *TodoRepository) Update(ctx context.Context, todo models.Todo) error {
	ret := _m.Called(ctx, todo)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Todo) error); ok {
		r0 = rf(ctx, todo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TodoRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type TodoRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - todo models.Todo
func (_e *TodoRepository_Expecter) Update(ctx interface{}, todo interface{}) *TodoRepository_Update_Call {
	return &TodoRepository_Update_Call{Call: _e.mock.On("Update", ctx, todo)}
}

func (_c *TodoRepository_Update_Call) Run(run func(ctx context.Context, todo models.Todo)) *TodoRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Todo))
	})
	return _c
}

func (_c *TodoRepository_Update_Call) Return(_a0 error) *TodoRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TodoRepository_Update_Call) RunAndReturn(run func(context.Context, models.Todo) error) *TodoRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAssignedTo provides a mock function with given fields: ctx, id, userID
func (_m *TodoRepository) UpdateAssignedTo(ctx context.Context, id string, userID string) (models.Todo, error) {
	ret := _m.Called(ctx, id, userID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAssignedTo")
	}

	var r0 models.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (models.Todo, error)); ok {
		return rf(ctx, id, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) models.Todo); ok {
		r0 = rf(ctx, id, userID)
	} else {
		r0 = ret.Get(0).(models.Todo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, id, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TodoRepository_UpdateAssignedTo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAssignedTo'
type TodoRepository_UpdateAssignedTo_Call struct {
	*mock.Call
}

// UpdateAssignedTo is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - userID string
func (_e *TodoRepository_Expecter) UpdateAssignedTo(ctx interface{}, id interface{}, userID interface{}) *TodoRepository_UpdateAssignedTo_Call {
	return &TodoRepository_UpdateAssignedTo_Call{Call: _e.mock.On("UpdateAssignedTo", ctx, id, userID)}
}

func (_c *TodoRepository_UpdateAssignedTo_Call) Run(run func(ctx context.Context, id string, userID string)) *TodoRepository_UpdateAssignedTo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *TodoRepository_UpdateAssignedTo_Call) Return(_a0 models.Todo, _a1 error) *TodoRepository_UpdateAssignedTo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TodoRepository_UpdateAssignedTo_Call) RunAndReturn(run func(context.Context, string, string) (models.Todo, error)) *TodoRepository_UpdateAssignedTo_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTodoDescription provides a mock function with given fields: ctx, id, description
func (_m *TodoRepository) UpdateTodoDescription(ctx context.Context, id string, description string) (models.Todo, error) {
	ret := _m.Called(ctx, id, description)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTodoDescription")
	}

	var r0 models.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (models.Todo, error)); ok {
		return rf(ctx, id, description)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) models.Todo); ok {
		r0 = rf(ctx, id, description)
	} else {
		r0 = ret.Get(0).(models.Todo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, id, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TodoRepository_UpdateTodoDescription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTodoDescription'
type TodoRepository_UpdateTodoDescription_Call struct {
	*mock.Call
}

// UpdateTodoDescription is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - description string
func (_e *TodoRepository_Expecter) UpdateTodoDescription(ctx interface{}, id interface{}, description interface{}) *TodoRepository_UpdateTodoDescription_Call {
	return &TodoRepository_UpdateTodoDescription_Call{Call: _e.mock.On("UpdateTodoDescription", ctx, id, description)}
}

func (_c *TodoRepository_UpdateTodoDescription_Call) Run(run func(ctx context.Context, id string, description string)) *TodoRepository_UpdateTodoDescription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *TodoRepository_UpdateTodoDescription_Call) Return(_a0 models.Todo, _a1 error) *TodoRepository_UpdateTodoDescription_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TodoRepository_UpdateTodoDescription_Call) RunAndReturn(run func(context.Context, string, string) (models.Todo, error)) *TodoRepository_UpdateTodoDescription_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTodoPriority provides a mock function with given fields: ctx, id, priority
func (_m *TodoRepository) UpdateTodoPriority(ctx context.Context, id string, priority constants.PriorityLevel) (models.Todo, error) {
	ret := _m.Called(ctx, id, priority)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTodoPriority")
	}

	var r0 models.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, constants.PriorityLevel) (models.Todo, error)); ok {
		return rf(ctx, id, priority)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, constants.PriorityLevel) models.Todo); ok {
		r0 = rf(ctx, id, priority)
	} else {
		r0 = ret.Get(0).(models.Todo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, constants.PriorityLevel) error); ok {
		r1 = rf(ctx, id, priority)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TodoRepository_UpdateTodoPriority_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTodoPriority'
type TodoRepository_UpdateTodoPriority_Call struct {
	*mock.Call
}

// UpdateTodoPriority is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - priority constants.PriorityLevel
func (_e *TodoRepository_Expecter) UpdateTodoPriority(ctx interface{}, id interface{}, priority interface{}) *TodoRepository_UpdateTodoPriority_Call {
	return &TodoRepository_UpdateTodoPriority_Call{Call: _e.mock.On("UpdateTodoPriority", ctx, id, priority)}
}

func (_c *TodoRepository_UpdateTodoPriority_Call) Run(run func(ctx context.Context, id string, priority constants.PriorityLevel)) *TodoRepository_UpdateTodoPriority_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(constants.PriorityLevel))
	})
	return _c
}

func (_c *TodoRepository_UpdateTodoPriority_Call) Return(_a0 models.Todo, _a1 error) *TodoRepository_UpdateTodoPriority_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TodoRepository_UpdateTodoPriority_Call) RunAndReturn(run func(context.Context, string, constants.PriorityLevel) (models.Todo, error)) *TodoRepository_UpdateTodoPriority_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTodoTitle provides a mock function with given fields: ctx, id, title
func (_m *TodoRepository) UpdateTodoTitle(ctx context.Context, id string, title string) (models.Todo, error) {
	ret := _m.Called(ctx, id, title)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTodoTitle")
	}

	var r0 models.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (models.Todo, error)); ok {
		return rf(ctx, id, title)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) models.Todo); ok {
		r0 = rf(ctx, id, title)
	} else {
		r0 = ret.Get(0).(models.Todo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, id, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TodoRepository_UpdateTodoTitle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTodoTitle'
type TodoRepository_UpdateTodoTitle_Call struct {
	*mock.Call
}

// UpdateTodoTitle is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - title string
func (_e *TodoRepository_Expecter) UpdateTodoTitle(ctx interface{}, id interface{}, title interface{}) *TodoRepository_UpdateTodoTitle_Call {
	return &TodoRepository_UpdateTodoTitle_Call{Call: _e.mock.On("UpdateTodoTitle", ctx, id, title)}
}

func (_c *TodoRepository_UpdateTodoTitle_Call) Run(run func(ctx context.Context, id string, title string)) *TodoRepository_UpdateTodoTitle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *TodoRepository_UpdateTodoTitle_Call) Return(_a0 models.Todo, _a1 error) *TodoRepository_UpdateTodoTitle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TodoRepository_UpdateTodoTitle_Call) RunAndReturn(run func(context.Context, string, string) (models.Todo, error)) *TodoRepository_UpdateTodoTitle_Call {
	_c.Call.Return(run)
	return _c
}

// NewTodoRepository creates a new instance of TodoRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTodoRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TodoRepository {
	mock := &TodoRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
