// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	constants "github.com/Victor-Uzunov/devops-project/todoservice/pkg/constants"

	mock "github.com/stretchr/testify/mock"

	models "github.com/Victor-Uzunov/devops-project/todoservice/pkg/models"
)

// TodoService is an autogenerated mock type for the TodoService type
type TodoService struct {
	mock.Mock
}

type TodoService_Expecter struct {
	mock *mock.Mock
}

func (_m *TodoService) EXPECT() *TodoService_Expecter {
	return &TodoService_Expecter{mock: &_m.Mock}
}

// CompleteTodo provides a mock function with given fields: ctx, id
func (_m *TodoService) CompleteTodo(ctx context.Context, id string) (models.Todo, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for CompleteTodo")
	}

	var r0 models.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.Todo, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.Todo); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Todo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TodoService_CompleteTodo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompleteTodo'
type TodoService_CompleteTodo_Call struct {
	*mock.Call
}

// CompleteTodo is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *TodoService_Expecter) CompleteTodo(ctx interface{}, id interface{}) *TodoService_CompleteTodo_Call {
	return &TodoService_CompleteTodo_Call{Call: _e.mock.On("CompleteTodo", ctx, id)}
}

func (_c *TodoService_CompleteTodo_Call) Run(run func(ctx context.Context, id string)) *TodoService_CompleteTodo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TodoService_CompleteTodo_Call) Return(_a0 models.Todo, _a1 error) *TodoService_CompleteTodo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TodoService_CompleteTodo_Call) RunAndReturn(run func(context.Context, string) (models.Todo, error)) *TodoService_CompleteTodo_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTodo provides a mock function with given fields: ctx, todo
func (_m *TodoService) CreateTodo(ctx context.Context, todo models.Todo) (string, error) {
	ret := _m.Called(ctx, todo)

	if len(ret) == 0 {
		panic("no return value specified for CreateTodo")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Todo) (string, error)); ok {
		return rf(ctx, todo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Todo) string); ok {
		r0 = rf(ctx, todo)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Todo) error); ok {
		r1 = rf(ctx, todo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TodoService_CreateTodo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTodo'
type TodoService_CreateTodo_Call struct {
	*mock.Call
}

// CreateTodo is a helper method to define mock.On call
//   - ctx context.Context
//   - todo models.Todo
func (_e *TodoService_Expecter) CreateTodo(ctx interface{}, todo interface{}) *TodoService_CreateTodo_Call {
	return &TodoService_CreateTodo_Call{Call: _e.mock.On("CreateTodo", ctx, todo)}
}

func (_c *TodoService_CreateTodo_Call) Run(run func(ctx context.Context, todo models.Todo)) *TodoService_CreateTodo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Todo))
	})
	return _c
}

func (_c *TodoService_CreateTodo_Call) Return(_a0 string, _a1 error) *TodoService_CreateTodo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TodoService_CreateTodo_Call) RunAndReturn(run func(context.Context, models.Todo) (string, error)) *TodoService_CreateTodo_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTodo provides a mock function with given fields: ctx, id
func (_m *TodoService) DeleteTodo(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTodo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TodoService_DeleteTodo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTodo'
type TodoService_DeleteTodo_Call struct {
	*mock.Call
}

// DeleteTodo is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *TodoService_Expecter) DeleteTodo(ctx interface{}, id interface{}) *TodoService_DeleteTodo_Call {
	return &TodoService_DeleteTodo_Call{Call: _e.mock.On("DeleteTodo", ctx, id)}
}

func (_c *TodoService_DeleteTodo_Call) Run(run func(ctx context.Context, id string)) *TodoService_DeleteTodo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TodoService_DeleteTodo_Call) Return(_a0 error) *TodoService_DeleteTodo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TodoService_DeleteTodo_Call) RunAndReturn(run func(context.Context, string) error) *TodoService_DeleteTodo_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTodos provides a mock function with given fields: ctx
func (_m *TodoService) GetAllTodos(ctx context.Context) ([]models.Todo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTodos")
	}

	var r0 []models.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Todo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Todo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TodoService_GetAllTodos_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTodos'
type TodoService_GetAllTodos_Call struct {
	*mock.Call
}

// GetAllTodos is a helper method to define mock.On call
//   - ctx context.Context
func (_e *TodoService_Expecter) GetAllTodos(ctx interface{}) *TodoService_GetAllTodos_Call {
	return &TodoService_GetAllTodos_Call{Call: _e.mock.On("GetAllTodos", ctx)}
}

func (_c *TodoService_GetAllTodos_Call) Run(run func(ctx context.Context)) *TodoService_GetAllTodos_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *TodoService_GetAllTodos_Call) Return(_a0 []models.Todo, _a1 error) *TodoService_GetAllTodos_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TodoService_GetAllTodos_Call) RunAndReturn(run func(context.Context) ([]models.Todo, error)) *TodoService_GetAllTodos_Call {
	_c.Call.Return(run)
	return _c
}

// GetTodo provides a mock function with given fields: ctx, id
func (_m *TodoService) GetTodo(ctx context.Context, id string) (models.Todo, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTodo")
	}

	var r0 models.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.Todo, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.Todo); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Todo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TodoService_GetTodo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTodo'
type TodoService_GetTodo_Call struct {
	*mock.Call
}

// GetTodo is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *TodoService_Expecter) GetTodo(ctx interface{}, id interface{}) *TodoService_GetTodo_Call {
	return &TodoService_GetTodo_Call{Call: _e.mock.On("GetTodo", ctx, id)}
}

func (_c *TodoService_GetTodo_Call) Run(run func(ctx context.Context, id string)) *TodoService_GetTodo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TodoService_GetTodo_Call) Return(_a0 models.Todo, _a1 error) *TodoService_GetTodo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TodoService_GetTodo_Call) RunAndReturn(run func(context.Context, string) (models.Todo, error)) *TodoService_GetTodo_Call {
	_c.Call.Return(run)
	return _c
}

// ListTodosByListID provides a mock function with given fields: ctx, listID
func (_m *TodoService) ListTodosByListID(ctx context.Context, listID string) ([]models.Todo, error) {
	ret := _m.Called(ctx, listID)

	if len(ret) == 0 {
		panic("no return value specified for ListTodosByListID")
	}

	var r0 []models.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]models.Todo, error)); ok {
		return rf(ctx, listID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.Todo); ok {
		r0 = rf(ctx, listID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, listID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TodoService_ListTodosByListID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTodosByListID'
type TodoService_ListTodosByListID_Call struct {
	*mock.Call
}

// ListTodosByListID is a helper method to define mock.On call
//   - ctx context.Context
//   - listID string
func (_e *TodoService_Expecter) ListTodosByListID(ctx interface{}, listID interface{}) *TodoService_ListTodosByListID_Call {
	return &TodoService_ListTodosByListID_Call{Call: _e.mock.On("ListTodosByListID", ctx, listID)}
}

func (_c *TodoService_ListTodosByListID_Call) Run(run func(ctx context.Context, listID string)) *TodoService_ListTodosByListID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TodoService_ListTodosByListID_Call) Return(_a0 []models.Todo, _a1 error) *TodoService_ListTodosByListID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TodoService_ListTodosByListID_Call) RunAndReturn(run func(context.Context, string) ([]models.Todo, error)) *TodoService_ListTodosByListID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAssignedTo provides a mock function with given fields: ctx, id, userID
func (_m *TodoService) UpdateAssignedTo(ctx context.Context, id string, userID string) (models.Todo, error) {
	ret := _m.Called(ctx, id, userID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAssignedTo")
	}

	var r0 models.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (models.Todo, error)); ok {
		return rf(ctx, id, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) models.Todo); ok {
		r0 = rf(ctx, id, userID)
	} else {
		r0 = ret.Get(0).(models.Todo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, id, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TodoService_UpdateAssignedTo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAssignedTo'
type TodoService_UpdateAssignedTo_Call struct {
	*mock.Call
}

// UpdateAssignedTo is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - userID string
func (_e *TodoService_Expecter) UpdateAssignedTo(ctx interface{}, id interface{}, userID interface{}) *TodoService_UpdateAssignedTo_Call {
	return &TodoService_UpdateAssignedTo_Call{Call: _e.mock.On("UpdateAssignedTo", ctx, id, userID)}
}

func (_c *TodoService_UpdateAssignedTo_Call) Run(run func(ctx context.Context, id string, userID string)) *TodoService_UpdateAssignedTo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *TodoService_UpdateAssignedTo_Call) Return(_a0 models.Todo, _a1 error) *TodoService_UpdateAssignedTo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TodoService_UpdateAssignedTo_Call) RunAndReturn(run func(context.Context, string, string) (models.Todo, error)) *TodoService_UpdateAssignedTo_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTodo provides a mock function with given fields: ctx, todo
func (_m *TodoService) UpdateTodo(ctx context.Context, todo models.Todo) error {
	ret := _m.Called(ctx, todo)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTodo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Todo) error); ok {
		r0 = rf(ctx, todo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TodoService_UpdateTodo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTodo'
type TodoService_UpdateTodo_Call struct {
	*mock.Call
}

// UpdateTodo is a helper method to define mock.On call
//   - ctx context.Context
//   - todo models.Todo
func (_e *TodoService_Expecter) UpdateTodo(ctx interface{}, todo interface{}) *TodoService_UpdateTodo_Call {
	return &TodoService_UpdateTodo_Call{Call: _e.mock.On("UpdateTodo", ctx, todo)}
}

func (_c *TodoService_UpdateTodo_Call) Run(run func(ctx context.Context, todo models.Todo)) *TodoService_UpdateTodo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Todo))
	})
	return _c
}

func (_c *TodoService_UpdateTodo_Call) Return(_a0 error) *TodoService_UpdateTodo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TodoService_UpdateTodo_Call) RunAndReturn(run func(context.Context, models.Todo) error) *TodoService_UpdateTodo_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTodoDescription provides a mock function with given fields: ctx, id, description
func (_m *TodoService) UpdateTodoDescription(ctx context.Context, id string, description string) (models.Todo, error) {
	ret := _m.Called(ctx, id, description)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTodoDescription")
	}

	var r0 models.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (models.Todo, error)); ok {
		return rf(ctx, id, description)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) models.Todo); ok {
		r0 = rf(ctx, id, description)
	} else {
		r0 = ret.Get(0).(models.Todo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, id, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TodoService_UpdateTodoDescription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTodoDescription'
type TodoService_UpdateTodoDescription_Call struct {
	*mock.Call
}

// UpdateTodoDescription is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - description string
func (_e *TodoService_Expecter) UpdateTodoDescription(ctx interface{}, id interface{}, description interface{}) *TodoService_UpdateTodoDescription_Call {
	return &TodoService_UpdateTodoDescription_Call{Call: _e.mock.On("UpdateTodoDescription", ctx, id, description)}
}

func (_c *TodoService_UpdateTodoDescription_Call) Run(run func(ctx context.Context, id string, description string)) *TodoService_UpdateTodoDescription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *TodoService_UpdateTodoDescription_Call) Return(_a0 models.Todo, _a1 error) *TodoService_UpdateTodoDescription_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TodoService_UpdateTodoDescription_Call) RunAndReturn(run func(context.Context, string, string) (models.Todo, error)) *TodoService_UpdateTodoDescription_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTodoPriority provides a mock function with given fields: ctx, id, priority
func (_m *TodoService) UpdateTodoPriority(ctx context.Context, id string, priority constants.PriorityLevel) (models.Todo, error) {
	ret := _m.Called(ctx, id, priority)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTodoPriority")
	}

	var r0 models.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, constants.PriorityLevel) (models.Todo, error)); ok {
		return rf(ctx, id, priority)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, constants.PriorityLevel) models.Todo); ok {
		r0 = rf(ctx, id, priority)
	} else {
		r0 = ret.Get(0).(models.Todo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, constants.PriorityLevel) error); ok {
		r1 = rf(ctx, id, priority)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TodoService_UpdateTodoPriority_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTodoPriority'
type TodoService_UpdateTodoPriority_Call struct {
	*mock.Call
}

// UpdateTodoPriority is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - priority constants.PriorityLevel
func (_e *TodoService_Expecter) UpdateTodoPriority(ctx interface{}, id interface{}, priority interface{}) *TodoService_UpdateTodoPriority_Call {
	return &TodoService_UpdateTodoPriority_Call{Call: _e.mock.On("UpdateTodoPriority", ctx, id, priority)}
}

func (_c *TodoService_UpdateTodoPriority_Call) Run(run func(ctx context.Context, id string, priority constants.PriorityLevel)) *TodoService_UpdateTodoPriority_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(constants.PriorityLevel))
	})
	return _c
}

func (_c *TodoService_UpdateTodoPriority_Call) Return(_a0 models.Todo, _a1 error) *TodoService_UpdateTodoPriority_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TodoService_UpdateTodoPriority_Call) RunAndReturn(run func(context.Context, string, constants.PriorityLevel) (models.Todo, error)) *TodoService_UpdateTodoPriority_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTodoTitle provides a mock function with given fields: ctx, id, name
func (_m *TodoService) UpdateTodoTitle(ctx context.Context, id string, name string) (models.Todo, error) {
	ret := _m.Called(ctx, id, name)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTodoTitle")
	}

	var r0 models.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (models.Todo, error)); ok {
		return rf(ctx, id, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) models.Todo); ok {
		r0 = rf(ctx, id, name)
	} else {
		r0 = ret.Get(0).(models.Todo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, id, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TodoService_UpdateTodoTitle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTodoTitle'
type TodoService_UpdateTodoTitle_Call struct {
	*mock.Call
}

// UpdateTodoTitle is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - name string
func (_e *TodoService_Expecter) UpdateTodoTitle(ctx interface{}, id interface{}, name interface{}) *TodoService_UpdateTodoTitle_Call {
	return &TodoService_UpdateTodoTitle_Call{Call: _e.mock.On("UpdateTodoTitle", ctx, id, name)}
}

func (_c *TodoService_UpdateTodoTitle_Call) Run(run func(ctx context.Context, id string, name string)) *TodoService_UpdateTodoTitle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *TodoService_UpdateTodoTitle_Call) Return(_a0 models.Todo, _a1 error) *TodoService_UpdateTodoTitle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TodoService_UpdateTodoTitle_Call) RunAndReturn(run func(context.Context, string, string) (models.Todo, error)) *TodoService_UpdateTodoTitle_Call {
	_c.Call.Return(run)
	return _c
}

// NewTodoService creates a new instance of TodoService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTodoService(t interface {
	mock.TestingT
	Cleanup(func())
}) *TodoService {
	mock := &TodoService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
